<link rel="stylesheet" href="./spec.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css" />
<script src="./spec.js"></script>
<pre class="metadata">
title: String.prototype.matchAll
stage: 1
contributors: Jordan Harband
</pre>
<emu-clause id="String.prototype.matchAll">
	<h1>String.prototype.matchAll ( regexp )</h1>
	<emu-note>_matchAll_ does not visibly mutate the provided _regexp_ in any way.</emu-note>
	<p>When the _matchAll_ method is called, the following steps are taken:</p>
	<emu-alg>
		1. Let _O_ be RequireObjectCoercible(*this* value).
		1. Let _isRegExp_ be IsRegExp(_regexp_).
		1. ReturnIfAbrupt(_isRegExp_).
		1. If _isRegExp_ is *false*, throw a *TypeError* exception.
		1. Let _S_ be ToString(*O*).
		1. ReturnIfAbrupt(_S_).
		1. Let _flags_ be ToString(Get(regexp, *"flags"*)).
		1. ReturnIfAbrupt(_flags_).
		1. If _flags_ does not contain the character *"g"*, let _flags_ be the String concatenation of the String *"g"* and _flags_.
		1. Let _rx_ be RegExpCreate(_regexp_, _flags_).
		1. Let _lastIndex_ be ToLength(Get(regexp, *"lastIndex"*)).
		1. ReturnIfAbrupt(_lastIndex_).
		1. Let _setStatus_ be Set(_rx_, *"lastIndex"*, _lastIndex_, *true*).
		1. ReturnIfAbrupt(_setStatus_).
		1. Return CreateRegExpStringIterator(_rx_, _S_)
	</emu-alg>
	<p>The _length_ property of the _matchAll_ method is *1*.</p>
	<emu-note>The _rx_ regular expression value is created solely to ensure that no visible mutation happens on _regexp_ - it should never be exposed to the environment.</emu-note>
</emu-clause>

<emu-clause id="CreateRegExpStringIterator">
	<h1>CreateRegExpStringIterator( _regexp_, _string_ )</h1>

	<p>The abstract operation CreateRegExpStringIterator is used to create such iterator objects. It performs the following steps:</p>
	<emu-alg>
		1. Assert: IsRegExp(_R_) is *true*.
		1. Assert: ToBoolean(Get(_R_, *"global"*)) is *true*.
		1. Assert: Type(_S_) is String.
		1. Let _iterator_ be ObjectCreate(<emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref>, «[[IteratingRegExp]], [[IteratedString]]»).
		1. Set _iterator's_ [[IteratingRegExp]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> to _R_.
		1. Set _iterator's_ [[IteratedString]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> to _S_.
		1. Return _iterator_.
	</emu-alg>
</emu-clause>

<emu-clause id="%RegExpStringIteratorPrototype%">
	<h1>The %RegExpStringIteratorPrototype% Object</h1>

	<p>All RegExp String Iterator Objects inherit properties from the <emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref> intrinsic object. The %RegExpStringIteratorPrototype% object is an ordinary object and its [[Prototype]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> is the <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-%iteratorprototype%-object">%IteratorPrototype% intrinsic object</a>. In addition, %RegExpStringIteratorPrototype% has the following properties:</p>

	<emu-clause id="%RegExpStringIteratorPrototype%.next">
		<h1>%RegExpStringIteratorPrototype%.next()</h1>
		<emu-alg>
			1. Let _O_ be the *this* value.
			1. If Type(_O_) is not Object, throw a *TypeError* exception.
			1. If _O_ does not have all of the internal slots of a RegExp String Iterator Object Instance (see <emu-xref href="#PropertiesOfRegExpStringIteratorInstances"></emu-xref>), throw a *TypeError* exception.
			1. Let _regexp_ be the value of the [[IteratingRegExp]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> of _O_.
			1. Let _string_ be the value of the [[IteratedString]] <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-object-internal-methods-and-internal-slots">internal slot</a> of _O_.
			1. Let _match_ be RegExpExec(_regexp_, _string_)
			1. If _match_ is *null*, then
				1. return CreateIterResultObject(*null*, *true*).
			1. Else,
				1. return CreateIterResultObject(_match_, *false*).
		</emu-alg>
		<p>The _length_ property of the `next` method is *0*.</p>
	</emu-clause>

	<emu-clause id="%RegExpStringIteratorPrototype%[@@toStringTag]">
		<h1>%RegExpStringIteratorPrototype%[ @@toStringTag ]</h1>
		<p>The initial value of the _@@toStringTag_ property is the String value *"RegExp String Iterator"*.</p>
		<p>This property has the attributes { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.</p>
	</emu-clause>

	<emu-clause id="PropertiesOfRegExpStringIteratorInstances">
		<h1>Properties of RegExp String Iterator Instances</h1>
		<p>RegExp String Iterator instances are ordinary objects that inherit properties from the <emu-xref href="#%RegExpStringIteratorPrototype%">%RegExpStringIteratorPrototype%</emu-xref> intrinsic object. RegExp String Iterator instances are initially created with the internal slots listed in <a href="#table-1">Table 1</a>.</p>
		<figure>
			<figcaption><span id="table-1">Table 1</span> &ndash; Internal Slots of RegExp String Iterator Instances</figcaption>
			<table class="real-table">
				<tbody>
					<tr>
						<th>Internal Slot</th>
						<th>Description</th>
					</tr>
					<tr>
						<td>[[IteratingRegExp]]</td>
						<td>The regular expression used for iteration. IsRegExp([[IteratingRegExp]]) is always *true*.</td>
					</tr>
					<tr>
						<td>[[IteratedString]]</td>
						<td>The String value being iterated upon.</td>
					</tr>
				</tbody>
			</table>
		</figure>
	</emu-clause>
</emu-clause>
